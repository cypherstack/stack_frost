/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:stackfrost/pages/add_wallet_views/name_your_wallet_view/name_your_wallet_view.dart';
import 'package:stackfrost/services/wallets_service.dart';
import 'package:stackfrost/themes/stack_colors.dart';
import 'package:stackfrost/utilities/enums/add_wallet_type_enum.dart';
import 'package:stackfrost/utilities/enums/coin_enum.dart';
import 'package:stackfrost/utilities/text_styles.dart';

class CreateWalletButtonGroup extends StatefulWidget {
  const CreateWalletButtonGroup({
    Key? key,
    required this.coin,
    required this.isDesktop,
  }) : super(key: key);

  final Coin coin;
  final bool isDesktop;

  @override
  State<CreateWalletButtonGroup> createState() =>
      _CreateWalletButtonGroupState();
}

class _CreateWalletButtonGroupState extends State<CreateWalletButtonGroup> {
  bool _frostMS = false;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: widget.isDesktop
          ? CrossAxisAlignment.center
          : CrossAxisAlignment.stretch,
      children: [
        Row(
          children: [
            Checkbox(
              value: _frostMS,
              onChanged: (v) {
                setState(() {
                  _frostMS = v!;
                });
              },
            ),
            Text(
              "FROST Multisig",
              style: widget.isDesktop
                  ? STextStyles.desktopSubtitleH2(context)
                  : STextStyles.subtitle(context),
            ),
          ],
        ),
        SizedBox(
          height: widget.isDesktop ? 12 : 8,
        ),
        ConstrainedBox(
          constraints: BoxConstraints(
            minHeight: widget.isDesktop ? 70 : 0,
            minWidth: widget.isDesktop ? 480 : 0,
          ),
          child: TextButton(
            style: Theme.of(context)
                .extension<StackColors>()!
                .getPrimaryEnabledButtonStyle(context),
            onPressed: () {
              Navigator.of(context).pushNamed(
                NameYourWalletView.routeName,
                arguments: (
                  addWalletType: AddWalletType.New,
                  coin: widget.coin,
                  walletType: _frostMS ? WalletType.frostMS : WalletType.normal,
                ),
              );
            },
            child: Text(
              "Create new wallet",
              style: widget.isDesktop
                  ? STextStyles.desktopButtonEnabled(context)
                  : STextStyles.button(context),
            ),
          ),
        ),
        SizedBox(
          height: widget.isDesktop ? 16 : 12,
        ),
        ConstrainedBox(
          constraints: BoxConstraints(
            minHeight: widget.isDesktop ? 70 : 0,
            minWidth: widget.isDesktop ? 480 : 0,
          ),
          child: TextButton(
            style: Theme.of(context)
                .extension<StackColors>()!
                .getSecondaryEnabledButtonStyle(context),
            onPressed: () {
              Navigator.of(context).pushNamed(
                NameYourWalletView.routeName,
                arguments: (
                  addWalletType: AddWalletType.Restore,
                  coin: widget.coin,
                  walletType: _frostMS ? WalletType.frostMS : WalletType.normal,
                ),
              );
            },
            child: Text(
              "Restore wallet",
              style: widget.isDesktop
                  ? STextStyles.desktopButtonSecondaryEnabled(context)
                  : STextStyles.button(context).copyWith(
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .accentColorDark),
            ),
          ),
        ),
      ],
    );
  }
}
