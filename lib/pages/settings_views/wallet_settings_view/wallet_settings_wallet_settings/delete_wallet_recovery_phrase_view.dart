/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';
import 'package:stackfrost/notifications/show_flush_bar.dart';
import 'package:stackfrost/pages/add_wallet_views/new_wallet_recovery_phrase_view/sub_widgets/mnemonic_table.dart';
import 'package:stackfrost/pages/home_view/home_view.dart';
import 'package:stackfrost/pages/wallet_view/transaction_views/transaction_details_view.dart';
import 'package:stackfrost/providers/providers.dart';
import 'package:stackfrost/services/coins/manager.dart';
import 'package:stackfrost/themes/stack_colors.dart';
import 'package:stackfrost/utilities/assets.dart';
import 'package:stackfrost/utilities/clipboard_interface.dart';
import 'package:stackfrost/utilities/constants.dart';
import 'package:stackfrost/utilities/text_styles.dart';
import 'package:stackfrost/utilities/util.dart';
import 'package:stackfrost/widgets/background.dart';
import 'package:stackfrost/widgets/custom_buttons/app_bar_icon_button.dart';
import 'package:stackfrost/widgets/custom_buttons/simple_copy_button.dart';
import 'package:stackfrost/widgets/detail_item.dart';
import 'package:stackfrost/widgets/rounded_white_container.dart';
import 'package:stackfrost/widgets/stack_dialog.dart';

class DeleteWalletRecoveryPhraseView extends ConsumerStatefulWidget {
  const DeleteWalletRecoveryPhraseView({
    Key? key,
    required this.manager,
    required this.mnemonic,
    this.frostWalletData,
    this.clipboardInterface = const ClipboardWrapper(),
  }) : super(key: key);

  static const routeName = "/deleteWalletRecoveryPhrase";

  final Manager manager;
  final ({String myName, String config, String keys})? frostWalletData;
  final List<String> mnemonic;

  final ClipboardInterface clipboardInterface;

  @override
  ConsumerState<DeleteWalletRecoveryPhraseView> createState() =>
      _DeleteWalletRecoveryPhraseViewState();
}

class _DeleteWalletRecoveryPhraseViewState
    extends ConsumerState<DeleteWalletRecoveryPhraseView> {
  late Manager _manager;
  late List<String> _mnemonic;
  late ClipboardInterface _clipboardInterface;

  @override
  void initState() {
    _manager = widget.manager;
    _mnemonic = widget.mnemonic;
    _clipboardInterface = widget.clipboardInterface;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    final bool frost = widget.frostWalletData != null;

    return Background(
      child: Scaffold(
        backgroundColor: Theme.of(context).extension<StackColors>()!.background,
        appBar: AppBar(
          leading: AppBarBackButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          actions: [
            if (!frost)
              Padding(
                padding: const EdgeInsets.all(10),
                child: AspectRatio(
                  aspectRatio: 1,
                  child: AppBarIconButton(
                    color:
                        Theme.of(context).extension<StackColors>()!.background,
                    shadows: const [],
                    icon: SvgPicture.asset(
                      Assets.svg.copy,
                      width: 20,
                      height: 20,
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .topNavIconPrimary,
                    ),
                    onPressed: () async {
                      final words = await _manager.mnemonic;
                      await _clipboardInterface
                          .setData(ClipboardData(text: words.join(" ")));
                      if (mounted) {
                        await showFloatingFlushBar(
                          type: FlushBarType.info,
                          message: "Copied to clipboard",
                          iconAsset: Assets.svg.copy,
                          context: context,
                        );
                      }
                    },
                  ),
                ),
              ),
          ],
        ),
        body: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Expanded(
                child: frost
                    ? Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          RoundedWhiteContainer(
                            child: Text(
                              "Please write down your backup data. Keep it safe and "
                              "never share it with anyone. "
                              "Your backup data is the only way you can access your "
                              "funds if you forget your PIN, lose your phone, etc."
                              "\n\n"
                              "Stack Wallet does not keep nor is able to restore "
                              "your backup data. "
                              "Only you have access to your wallet.",
                              style: STextStyles.label(context),
                            ),
                          ),
                          const SizedBox(
                            height: 24,
                          ),
                          // DetailItem(
                          //   title: "My name",
                          //   detail: frostWalletData!.myName,
                          //   button: Util.isDesktop
                          //       ? IconCopyButton(
                          //           data: frostWalletData!.myName,
                          //         )
                          //       : SimpleCopyButton(
                          //           data: frostWalletData!.myName,
                          //         ),
                          // ),
                          // const SizedBox(
                          //   height: 16,
                          // ),
                          DetailItem(
                            title: "Multisig config",
                            detail: widget.frostWalletData!.config,
                            button: Util.isDesktop
                                ? IconCopyButton(
                                    data: widget.frostWalletData!.config,
                                  )
                                : SimpleCopyButton(
                                    data: widget.frostWalletData!.config,
                                  ),
                          ),
                          const SizedBox(
                            height: 16,
                          ),
                          DetailItem(
                            title: "Keys",
                            detail: widget.frostWalletData!.keys,
                            button: Util.isDesktop
                                ? IconCopyButton(
                                    data: widget.frostWalletData!.keys,
                                  )
                                : SimpleCopyButton(
                                    data: widget.frostWalletData!.keys,
                                  ),
                          ),
                          if (!Util.isDesktop) const Spacer(),
                        ],
                      )
                    : Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          const SizedBox(
                            height: 4,
                          ),
                          Text(
                            _manager.walletName,
                            textAlign: TextAlign.center,
                            style: STextStyles.label(context).copyWith(
                              fontSize: 12,
                            ),
                          ),
                          const SizedBox(
                            height: 4,
                          ),
                          Text(
                            "Recovery Phrase",
                            textAlign: TextAlign.center,
                            style: STextStyles.pageTitleH1(context),
                          ),
                          const SizedBox(
                            height: 16,
                          ),
                          Container(
                            decoration: BoxDecoration(
                              color: Theme.of(context)
                                  .extension<StackColors>()!
                                  .popupBG,
                              borderRadius: BorderRadius.circular(
                                  Constants.size.circularBorderRadius),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.all(12),
                              child: Text(
                                "Please write down your recovery phrase in the correct order and save it to keep your funds secure. You will also be asked to verify the words on the next screen.",
                                style: STextStyles.label(context).copyWith(
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .accentColorDark),
                              ),
                            ),
                          ),
                          const SizedBox(
                            height: 8,
                          ),
                          Expanded(
                            child: SingleChildScrollView(
                              child: MnemonicTable(
                                words: _mnemonic,
                                isDesktop: false,
                              ),
                            ),
                          ),
                        ],
                      ),
              ),
              const SizedBox(
                height: 16,
              ),
              TextButton(
                style: Theme.of(context)
                    .extension<StackColors>()!
                    .getPrimaryEnabledButtonStyle(context),
                onPressed: () {
                  showDialog<dynamic>(
                    barrierDismissible: true,
                    context: context,
                    builder: (_) => StackDialog(
                      title: "Thanks! Your wallet will be deleted.",
                      leftButton: TextButton(
                        style: Theme.of(context)
                            .extension<StackColors>()!
                            .getSecondaryEnabledButtonStyle(context),
                        onPressed: () {
                          Navigator.pop(context);
                        },
                        child: Text(
                          "Cancel",
                          style: STextStyles.button(context).copyWith(
                              color: Theme.of(context)
                                  .extension<StackColors>()!
                                  .accentColorDark),
                        ),
                      ),
                      rightButton: TextButton(
                        style: Theme.of(context)
                            .extension<StackColors>()!
                            .getPrimaryEnabledButtonStyle(context),
                        onPressed: () async {
                          final walletId = _manager.walletId;
                          final walletsInstance =
                              ref.read(walletsChangeNotifierProvider);
                          await ref
                              .read(walletsServiceChangeNotifierProvider)
                              .deleteWallet(_manager.walletName, true);

                          if (mounted) {
                            Navigator.of(context).popUntil(
                                ModalRoute.withName(HomeView.routeName));
                          }

                          // wait for widget tree to dispose of any widgets watching the manager
                          await Future<void>.delayed(
                              const Duration(seconds: 1));
                          walletsInstance.removeWallet(walletId: walletId);
                        },
                        child: Text(
                          "Ok",
                          style: STextStyles.button(context),
                        ),
                      ),
                    ),
                  );
                },
                child: Text(
                  "Continue",
                  style: STextStyles.button(context),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
