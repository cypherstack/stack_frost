/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';
import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:stackfrost/pages/wallet_view/sub_widgets/wallet_balance_toggle_sheet.dart';
import 'package:stackfrost/pages/wallet_view/sub_widgets/wallet_refresh_button.dart';
import 'package:stackfrost/providers/providers.dart';
import 'package:stackfrost/providers/wallet/wallet_balance_toggle_state_provider.dart';
import 'package:stackfrost/services/event_bus/events/global/balance_refreshed_event.dart';
import 'package:stackfrost/services/event_bus/events/global/wallet_sync_status_changed_event.dart';
import 'package:stackfrost/services/event_bus/global_event_bus.dart';
import 'package:stackfrost/themes/coin_icon_provider.dart';
import 'package:stackfrost/themes/stack_colors.dart';
import 'package:stackfrost/utilities/amount/amount.dart';
import 'package:stackfrost/utilities/amount/amount_formatter.dart';
import 'package:stackfrost/utilities/assets.dart';
import 'package:stackfrost/utilities/enums/wallet_balance_toggle_state.dart';
import 'package:stackfrost/utilities/text_styles.dart';
import 'package:stackfrost/widgets/conditional_parent.dart';

class WalletSummaryInfo extends ConsumerStatefulWidget {
  const WalletSummaryInfo({
    Key? key,
    required this.walletId,
    required this.initialSyncStatus,
  }) : super(key: key);

  final String walletId;
  final WalletSyncStatus initialSyncStatus;

  @override
  ConsumerState<WalletSummaryInfo> createState() => _WalletSummaryInfoState();
}

class _WalletSummaryInfoState extends ConsumerState<WalletSummaryInfo> {
  late StreamSubscription<BalanceRefreshedEvent> _balanceUpdated;

  String receivingAddress = "";

  void showSheet() {
    showModalBottomSheet<dynamic>(
      backgroundColor: Colors.transparent,
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(
          top: Radius.circular(20),
        ),
      ),
      builder: (_) => WalletBalanceToggleSheet(walletId: widget.walletId),
    );
  }

  @override
  void initState() {
    _balanceUpdated =
        GlobalEventBus.instance.on<BalanceRefreshedEvent>().listen(
      (event) async {
        if (event.walletId == widget.walletId) {
          setState(() {});
        }
      },
    );

    // managerProvider = widget.managerProvider;
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {
      final address = await ref
          .read(walletsChangeNotifierProvider)
          .getManager(widget.walletId)
          .currentReceivingAddress;
      setState(() {
        receivingAddress = address;
      });
    });
    super.initState();
  }

  @override
  void dispose() {
    _balanceUpdated.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    // bool isMonkey = true;

    final manager = ref.watch(walletsChangeNotifierProvider
        .select((value) => value.getManager(widget.walletId)));

    // final externalCalls = ref.watch(
    //     prefsChangeNotifierProvider.select((value) => value.externalCalls));
    final coin = manager.coin;
    final balance = ref.watch(walletsChangeNotifierProvider
        .select((value) => value.getManager(widget.walletId).balance));
    //
    // final locale = ref.watch(
    //     localeServiceChangeNotifierProvider.select((value) => value.locale));
    //
    // final baseCurrency = ref
    //     .watch(prefsChangeNotifierProvider.select((value) => value.currency));

    // final priceTuple = ref.watch(priceAnd24hChangeNotifierProvider
    //     .select((value) => value.getPrice(coin)));

    final _showAvailable =
        ref.watch(walletBalanceToggleStateProvider.state).state ==
            WalletBalanceToggleState.available;

    final Amount balanceToShow;
    String title;

    balanceToShow = _showAvailable ? balance.spendable : balance.total;
    title = _showAvailable ? "Available balance" : "Full balance";

    List<int>? imageBytes;

    return ConditionalParent(
      condition: imageBytes != null,
      builder: (child) => Stack(
        children: [
          Positioned.fill(
            left: 150.0,
            child: SvgPicture.memory(
              Uint8List.fromList(imageBytes!),
            ),
          ),
          child,
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                GestureDetector(
                  onTap: showSheet,
                  child: Row(
                    children: [
                      Text(
                        title,
                        style: STextStyles.subtitle500(context).copyWith(
                          color: Theme.of(context)
                              .extension<StackColors>()!
                              .textFavoriteCard,
                        ),
                      ),
                      const SizedBox(
                        width: 4,
                      ),
                      SvgPicture.asset(
                        Assets.svg.chevronDown,
                        color: Theme.of(context)
                            .extension<StackColors>()!
                            .textFavoriteCard,
                        width: 8,
                        height: 4,
                      ),
                    ],
                  ),
                ),
                const Spacer(),
                FittedBox(
                  fit: BoxFit.scaleDown,
                  child: SelectableText(
                    ref.watch(pAmountFormatter(coin)).format(balanceToShow),
                    style: STextStyles.pageTitleH1(context).copyWith(
                      fontSize: 24,
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .textFavoriteCard,
                    ),
                  ),
                ),
                // if (externalCalls)
                //   Text(
                //     "${(priceTuple.item1 * balanceToShow.decimal).toAmount(
                //           fractionDigits: 2,
                //         ).fiatString(
                //           locale: locale,
                //         )} $baseCurrency",
                //     style: STextStyles.subtitle500(context).copyWith(
                //       color: Theme.of(context)
                //           .extension<StackColors>()!
                //           .textFavoriteCard,
                //     ),
                //   ),
              ],
            ),
          ),
          Column(
            children: [
              SvgPicture.file(
                File(
                  ref.watch(coinIconProvider(coin)),
                ),
                width: 24,
                height: 24,
              ),
              const Spacer(),
              WalletRefreshButton(
                walletId: widget.walletId,
                initialSyncStatus: widget.initialSyncStatus,
              ),
            ],
          )
        ],
      ),
    );
  }
}
